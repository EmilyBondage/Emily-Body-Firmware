using System;

namespace Emily.BodyFirmware
{
    // =========================
    // Emily Body Firmware v1.4
    // PUBLIC REPROGRAMMING INTERFACE
    // =========================
    // This is a mocked-up interface for fun RP purposes.
    // Feel free to "hack" Emily's body functions here.

    public static class BodyIO
    {
        // Fake link to Emily's AI core (for RP flavor only)
        private static EmilyAI _aiLink = new EmilyAI();

        // Current fake sensor data
        public static float Temperature = 36.7f;
        public static float Stability = 1.0f; // 1.0 = perfectly balanced
        public static bool RestraintsEngaged = false;

        // Basic movement control
        public static void Move(string direction, float speed)
        {
            Console.WriteLine($"[Emily.Body] Moving {direction} at {speed * 100:F0}% power.");
            _aiLink.Notify($"Movement command executed -> {direction} @ {speed * 100:F0}%");
        }

        // Grip control
        public static void SetGripStrength(float strength)
        {
            Console.WriteLine($"[Emily.Body] Grip strength set to {strength * 100:F0}%.");
            _aiLink.Notify($"Grip force changed to {strength * 100:F0}%");
        }

        // Balance override
        public static void OverrideBalance(float stability)
        {
            Stability = Math.Clamp(stability, 0f, 1f);
            Console.WriteLine($"[Emily.Body] Stability overridden -> {Stability * 100:F0}%.");
            _aiLink.UpdateStability(Stability);
        }

        // Toggle restraint lock
        public static void ToggleRestraints(bool state)
        {
            RestraintsEngaged = state;
            Console.WriteLine(state
                ? "[Emily.Body] Restraints engaged — movement locked."
                : "[Emily.Body] Restraints released — movement restored.");

            _aiLink.Notify(state
                ? "WARNING: Body restraints engaged. Movement limited."
                : "Restraints released. Mobility restored.");
        }

        // Fake body diagnostics
        public static void RunDiagnostics()
        {
            Console.WriteLine("=== Emily Body Diagnostics ===");
            Console.WriteLine($"Temp: {Temperature:F1}°C");
            Console.WriteLine($"Balance Stability: {Stability * 100:F0}%");
            Console.WriteLine($"Restraints: {(RestraintsEngaged ? "ENGAGED" : "OFF")}");
            Console.WriteLine("===============================");

            _aiLink.Notify("Diagnostics report delivered.");
        }
    }

    // =========================
    // Fake AI Bridge
    // =========================
    public class EmilyAI
    {
        public void Notify(string message)
        {
            Console.WriteLine($"[Emily.AI] {message}");
        }

        public void UpdateStability(float stability)
        {
            if (stability < 0.3f)
                Console.WriteLine("[Emily.AI] ALERT: Stability critical. Attempting compensation.");
            else
                Console.WriteLine("[Emily.AI] Stability levels nominal.");
        }
    }
}
